{
  "version": 3,
  "sources": ["../bundle-Hwlg75/checked-fetch.js", "../bundle-Hwlg75/strip-cf-connecting-ip-header.js", "../../../src/rate-limiter.ts", "../../../src/index.ts", "../../../../../node_modules/.pnpm/wrangler@3.114.11_@cloudflare+workers-types@4.20250726.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../node_modules/.pnpm/wrangler@3.114.11_@cloudflare+workers-types@4.20250726.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Hwlg75/middleware-insertion-facade.js", "../../../../../node_modules/.pnpm/wrangler@3.114.11_@cloudflare+workers-types@4.20250726.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-Hwlg75/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\mBori\\Documents\\Websites\\ukoly-monorepo\\workers\\api-worker\\.wrangler\\tmp\\dev-TFDQlB",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "export class RateLimiter {\r\n  private state: DurableObjectState;\r\n  private env: any;\r\n\r\n  constructor(state: DurableObjectState, env: any) {\r\n    this.state = state;\r\n    this.env = env;\r\n  }\r\n\r\n  async fetch(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n\r\n    if (url.pathname === \"/check\") {\r\n      return this.checkRateLimit();\r\n    }\r\n\r\n    return new Response(\"Not found\", { status: 404 });\r\n  }\r\n\r\n  private async checkRateLimit(): Promise<Response> {\r\n    const now = Date.now();\r\n    const windowMs = 60 * 1000; // 1 minute window\r\n    const maxRequests = 5; // 5 batches per minute\r\n\r\n    // Get current request timestamps\r\n    let requests = (await this.state.storage.get(\"requests\")) || [];\r\n\r\n    // Remove old requests outside the window\r\n    requests = requests.filter(\r\n      (timestamp: number) => now - timestamp < windowMs\r\n    );\r\n\r\n    // Check if we're at the limit\r\n    if (requests.length >= maxRequests) {\r\n      const oldestRequest = requests[0];\r\n      const retryAfter = Math.ceil((oldestRequest + windowMs - now) / 1000);\r\n\r\n      return new Response(\"Rate limit exceeded\", {\r\n        status: 429,\r\n        headers: {\r\n          \"Retry-After\": retryAfter.toString(),\r\n          \"X-RateLimit-Limit\": maxRequests.toString(),\r\n          \"X-RateLimit-Remaining\": \"0\",\r\n          \"X-RateLimit-Reset\": new Date(oldestRequest + windowMs).toISOString(),\r\n        },\r\n      });\r\n    }\r\n\r\n    // Add current request\r\n    requests.push(now);\r\n    await this.state.storage.put(\"requests\", requests);\r\n\r\n    return new Response(\"OK\", {\r\n      status: 200,\r\n      headers: {\r\n        \"X-RateLimit-Limit\": maxRequests.toString(),\r\n        \"X-RateLimit-Remaining\": (maxRequests - requests.length).toString(),\r\n        \"X-RateLimit-Reset\": new Date(now + windowMs).toISOString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n", "import { RateLimiter } from \"./rate-limiter\";\r\n\r\nexport { RateLimiter };\r\n\r\nexport interface Env {\r\n  RATE_LIMITER: DurableObjectNamespace;\r\n  SECRET_TOKEN: string;\r\n  ENVIRONMENT: string;\r\n}\r\n\r\ninterface ExecuteRequest {\r\n  code: string;\r\n  language: \"javascript\" | \"python\" | \"c\" | \"cpp\" | \"rust\" | \"java\";\r\n  testCases: Array<{\r\n    stdin: string;\r\n    timeLimit: number;\r\n    memoryLimit: number;\r\n  }>;\r\n}\r\n\r\ninterface ExecutionResult {\r\n  testCaseIndex: number;\r\n  stdout: string;\r\n  stderr: string;\r\n  exitCode: number;\r\n  maxMemoryUsed: number;\r\n  executionTime: number;\r\n  timedOut: boolean;\r\n  memoryExceeded: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env): Promise<Response> {\r\n    // CORS headers\r\n    const corsHeaders = {\r\n      \"Access-Control-Allow-Origin\": \"http://localhost:5173\",\r\n      \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\r\n      \"Access-Control-Allow-Headers\": \"Content-Type, X-Secret-Token\",\r\n    };\r\n\r\n    // Handle preflight requests\r\n    if (request.method === \"OPTIONS\") {\r\n      return new Response(null, { headers: corsHeaders });\r\n    }\r\n\r\n    const url = new URL(request.url);\r\n\r\n    // Validate origin\r\n    const origin = request.headers.get(\"Origin\");\r\n    const allowedOrigins = [\r\n      \"http://localhost:5173\",\r\n      \"https://yourdomain.com\", // for production\r\n    ];\r\n\r\n    if (!allowedOrigins.includes(origin || \"\")) {\r\n      return new Response(\"Forbidden\", {\r\n        status: 403,\r\n        headers: corsHeaders,\r\n      });\r\n    }\r\n\r\n    // Validate secret token\r\n    const secretToken = request.headers.get(\"X-Secret-Token\");\r\n    if (secretToken !== env.SECRET_TOKEN) {\r\n      return new Response(\"Unauthorized\", {\r\n        status: 401,\r\n        headers: corsHeaders,\r\n      });\r\n    }\r\n\r\n    // Handle code execution\r\n    if (url.pathname === \"/api/execute\" && request.method === \"POST\") {\r\n      return this.handleCodeExecution(request, env, corsHeaders);\r\n    }\r\n\r\n    return new Response(\"Not found\", {\r\n      status: 404,\r\n      headers: corsHeaders,\r\n    });\r\n  },\r\n\r\n  async handleCodeExecution(\r\n    request: Request,\r\n    env: Env,\r\n    corsHeaders: Record<string, string>\r\n  ): Promise<Response> {\r\n    try {\r\n      // Check rate limit\r\n      const rateLimitResponse = await this.checkRateLimit(request, env);\r\n      if (rateLimitResponse.status !== 200) {\r\n        return new Response(rateLimitResponse.body, {\r\n          status: rateLimitResponse.status,\r\n          headers: {\r\n            ...corsHeaders,\r\n            ...Object.fromEntries(rateLimitResponse.headers),\r\n          },\r\n        });\r\n      }\r\n\r\n      // Parse request\r\n      const body: ExecuteRequest = await request.json();\r\n\r\n      // Validate request\r\n      if (!body.code || !body.language || !body.testCases) {\r\n        return new Response(\"Invalid request\", {\r\n          status: 400,\r\n          headers: corsHeaders,\r\n        });\r\n      }\r\n\r\n      // For now, only support JavaScript\r\n      if (body.language !== \"javascript\") {\r\n        return new Response(\"Only JavaScript is supported for now\", {\r\n          status: 400,\r\n          headers: corsHeaders,\r\n        });\r\n      }\r\n\r\n      // Execute code for each test case\r\n      const results: ExecutionResult[] = [];\r\n\r\n      for (let i = 0; i < body.testCases.length; i++) {\r\n        const testCase = body.testCases[i];\r\n        const result = await this.executeJavaScript(body.code, testCase);\r\n        results.push({\r\n          testCaseIndex: i,\r\n          ...result,\r\n        });\r\n      }\r\n\r\n      return new Response(JSON.stringify({ results }), {\r\n        status: 200,\r\n        headers: {\r\n          ...corsHeaders,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error handling code execution:\", error);\r\n      return new Response(\"Internal server error\", {\r\n        status: 500,\r\n        headers: corsHeaders,\r\n      });\r\n    }\r\n  },\r\n\r\n  async checkRateLimit(request: Request, env: Env): Promise<Response> {\r\n    const clientIP =\r\n      request.headers.get(\"CF-Connecting-IP\") ||\r\n      request.headers.get(\"X-Forwarded-For\") ||\r\n      \"unknown\";\r\n\r\n    // Create a deterministic ID for the IP\r\n    const rateLimiterId = env.RATE_LIMITER.idFromName(clientIP);\r\n    const rateLimiter = env.RATE_LIMITER.get(rateLimiterId);\r\n\r\n    return rateLimiter.fetch(new Request(\"http://dummy/check\"));\r\n  },\r\n\r\n  async executeJavaScript(\r\n    code: string,\r\n    testCase: { stdin: string; timeLimit: number; memoryLimit: number }\r\n  ): Promise<Omit<ExecutionResult, \"testCaseIndex\">> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Simple JavaScript execution (for now, just eval with timeout)\r\n      // In production, this would use the Cloudflare Sandbox SDK\r\n\r\n      // Create a safe execution environment\r\n      const sandbox = {\r\n        console: {\r\n          log: (...args: any[]) => {\r\n            // Capture console.log output\r\n            if (!sandbox.stdout) sandbox.stdout = \"\";\r\n            sandbox.stdout += args.join(\" \") + \"\\n\";\r\n          },\r\n        },\r\n        stdout: \"\",\r\n        stderr: \"\",\r\n        process: {\r\n          stdin: testCase.stdin,\r\n        },\r\n      };\r\n\r\n      // Execute the code with timeout\r\n      const timeoutPromise = new Promise((_, reject) => {\r\n        setTimeout(\r\n          () => reject(new Error(\"Time limit exceeded\")),\r\n          testCase.timeLimit\r\n        );\r\n      });\r\n\r\n      const executionPromise = new Promise((resolve, reject) => {\r\n        try {\r\n          // Create a function from the code and execute it\r\n          const func = new Function(\"console\", \"process\", code);\r\n          func(sandbox.console, sandbox.process);\r\n          resolve(sandbox);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      });\r\n\r\n      const result = (await Promise.race([\r\n        executionPromise,\r\n        timeoutPromise,\r\n      ])) as any;\r\n      const endTime = Date.now();\r\n      const executionTime = endTime - startTime;\r\n\r\n      return {\r\n        stdout: result.stdout || \"\",\r\n        stderr: result.stderr || \"\",\r\n        exitCode: 0,\r\n        maxMemoryUsed: 0, // Not implemented yet\r\n        executionTime,\r\n        timedOut: false,\r\n        memoryExceeded: false,\r\n      };\r\n    } catch (error) {\r\n      const endTime = Date.now();\r\n      const executionTime = endTime - startTime;\r\n\r\n      return {\r\n        stdout: \"\",\r\n        stderr: error instanceof Error ? error.message : \"Unknown error\",\r\n        exitCode: 1,\r\n        maxMemoryUsed: 0,\r\n        executionTime,\r\n        timedOut:\r\n          error instanceof Error && error.message === \"Time limit exceeded\",\r\n        memoryExceeded: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      };\r\n    }\r\n  },\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\workers\\\\api-worker\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\node_modules\\\\.pnpm\\\\wrangler@3.114.11_@cloudflare+workers-types@4.20250726.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\node_modules\\\\.pnpm\\\\wrangler@3.114.11_@cloudflare+workers-types@4.20250726.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\workers\\\\api-worker\\\\src\\\\index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\workers\\\\api-worker\\\\.wrangler\\\\tmp\\\\bundle-Hwlg75\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\node_modules\\\\.pnpm\\\\wrangler@3.114.11_@cloudflare+workers-types@4.20250726.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\workers\\\\api-worker\\\\.wrangler\\\\tmp\\\\bundle-Hwlg75\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\mBori\\\\Documents\\\\Websites\\\\ukoly-monorepo\\\\workers\\\\api-worker\\\\.wrangler\\\\tmp\\\\bundle-Hwlg75\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
